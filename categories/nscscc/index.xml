<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>NSCSCC on crpboy</title>
        <link>https://crpboy.github.io/categories/nscscc/</link>
        <description>Recent content in NSCSCC on crpboy</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>crpboy</copyright>
        <lastBuildDate>Tue, 03 Sep 2024 15:28:55 +0800</lastBuildDate><atom:link href="https://crpboy.github.io/categories/nscscc/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>NSCSCC2024决赛汇报文档</title>
        <link>https://crpboy.github.io/p/nscscc-2024-report/</link>
        <pubDate>Tue, 27 Aug 2024 00:00:00 +0000</pubDate>
        
        <guid>https://crpboy.github.io/p/nscscc-2024-report/</guid>
        <description>&lt;img src="https://crpboy.github.io/p/nscscc-2024-report/cover.png" alt="Featured image of post NSCSCC2024决赛汇报文档" /&gt;&lt;h1 id=&#34;1-概述&#34;&gt;1. 概述
&lt;/h1&gt;&lt;h2 id=&#34;11-项目简介&#34;&gt;1.1 项目简介
&lt;/h2&gt;&lt;p&gt;本项目是第八届&amp;quot;龙芯杯&amp;quot;全国大学生计算机系统能力培养大赛（NSCSCC 2024）的参赛作品。&lt;/p&gt;
&lt;p&gt;本项目为基于龙芯架构32位精简版指令集(LA32R)，开发的一款乱序多发射的CPU。项目基于Tomasulo动态调度算法，使用ROB重排序缓存，实现了一个&lt;strong&gt;乱序执行&lt;/strong&gt;、&lt;strong&gt;后端四发射&lt;/strong&gt;的CPU，最深级数到达了&lt;strong&gt;13&lt;/strong&gt;。此外，我们还实现了分支预测、Cache缓存等诸多特性。我们在官方提供的性能测试框架当中，达到了&lt;strong&gt;0.78&lt;/strong&gt;的IPC，I/DCache的命中率均达到了**98.8%**以上，使得CPU取得了良好的性能表现。&lt;/p&gt;
&lt;h2 id=&#34;12-处理器总体参数&#34;&gt;1.2 处理器总体参数
&lt;/h2&gt;&lt;p&gt;我们非常关注处理器执行指令的效率，因此，下面将给出我们CPU在执行官方提供的性能测试框架时的相关参数概览。&lt;/p&gt;
&lt;p&gt;从下表可以看到，我们的I/D-Cache达到了98%以上的高命中率，优秀的访存维护逻辑使得我们的CPU在访存密集型测试集当中保持了良好的IPC。同时我们的分支命中成功率也达到了91.4%，这使得我们的CPU能够尽可能地避免分支预测失败带来的大量气泡，为我们加深流水级、实现后端乱序执行打下了良好的基础。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;项目&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;参数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;IPC&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.78&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;频率&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;83hz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;分支预测成功率&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;91.4%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;I-Cache命中率&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;99.6%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;D-Cache命中率&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;98.8%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;流水级数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;13-实现功能&#34;&gt;1.3 实现功能
&lt;/h2&gt;&lt;p&gt;我们的指令集支持了龙芯架构32位精简版中除了浮点指令以外的所有指令，并支持了指令集中全部CSR寄存器的维护，实现了丰富的指令功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;算数类指令：&lt;code&gt;ADD.W&lt;/code&gt;, &lt;code&gt;SUB.W&lt;/code&gt;, &lt;code&gt;ADDI.W&lt;/code&gt;, &lt;code&gt;LU12I.W&lt;/code&gt;, &lt;code&gt;SLT[U]&lt;/code&gt;, &lt;code&gt;SLT[U]I&lt;/code&gt;, &lt;code&gt;PCADDU12I&lt;/code&gt;, &lt;code&gt;AND&lt;/code&gt;, &lt;code&gt;OR&lt;/code&gt;, &lt;code&gt;NOR&lt;/code&gt;, &lt;code&gt;XOR&lt;/code&gt;, &lt;code&gt;ANDI&lt;/code&gt;, &lt;code&gt;ORI&lt;/code&gt;, &lt;code&gt;XORI&lt;/code&gt;, &lt;code&gt;MUL.W&lt;/code&gt;, &lt;code&gt;MULH.W[U]&lt;/code&gt;, &lt;code&gt;DIV.W[U]&lt;/code&gt;, &lt;code&gt;MOD.W[U]&lt;/code&gt;, &lt;code&gt;SLL.W&lt;/code&gt;, &lt;code&gt;SRL.W&lt;/code&gt;, &lt;code&gt;SRA.W&lt;/code&gt;, &lt;code&gt;SLLI.W&lt;/code&gt;, &lt;code&gt;SRLI.W&lt;/code&gt;, &lt;code&gt;SRAI.W&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;跳转指令：&lt;code&gt;BEQ&lt;/code&gt;, &lt;code&gt;BNE&lt;/code&gt;, &lt;code&gt;BLT[U]&lt;/code&gt;, &lt;code&gt;BGE[U]&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;BL&lt;/code&gt;, &lt;code&gt;JIRL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;访存指令：&lt;code&gt;LD.B&lt;/code&gt;, &lt;code&gt;LD.H&lt;/code&gt;, &lt;code&gt;LD.W&lt;/code&gt;, &lt;code&gt;LD.BU&lt;/code&gt;, &lt;code&gt;LD.HU&lt;/code&gt;, &lt;code&gt;ST.B&lt;/code&gt;, &lt;code&gt;ST.H&lt;/code&gt;, &lt;code&gt;ST.W&lt;/code&gt;,&lt;code&gt;LL&lt;/code&gt;,&lt;code&gt;SC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;CSR相关指令：&lt;code&gt;CSRRD&lt;/code&gt;, &lt;code&gt;CSRWR&lt;/code&gt;, &lt;code&gt;CSRXCHG&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Cache相关指令：&lt;code&gt;CACOP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;TLB相关指令：&lt;code&gt;TLBSRCH&lt;/code&gt;, &lt;code&gt;TLBRD&lt;/code&gt;, &lt;code&gt;TLBWR&lt;/code&gt;, &lt;code&gt;TLBFILL&lt;/code&gt;, &lt;code&gt;INVTLB&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;栅障指令：&lt;code&gt;IBAR&lt;/code&gt;,&lt;code&gt;DBAR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;其他杂项指令：&lt;code&gt;RDCNTVL.W&lt;/code&gt;, &lt;code&gt;RDCNTVH.W&lt;/code&gt;, &lt;code&gt;RDCNTID&lt;/code&gt;, &lt;code&gt;SYSCALL&lt;/code&gt;, &lt;code&gt;BREAK&lt;/code&gt;, &lt;code&gt;ERTN&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-处理器微架构设计&#34;&gt;2. 处理器微架构设计
&lt;/h1&gt;&lt;h2 id=&#34;21-整体介绍&#34;&gt;2.1 整体介绍
&lt;/h2&gt;&lt;p&gt;NoAXI处理器采取前后端设计，前端共5个流水级，后端共6个流水级，共11个流水级，最深级数为13。&lt;/p&gt;
&lt;p&gt;前端五个流水级，分别为 &lt;strong&gt;预取指&lt;/strong&gt;、&lt;strong&gt;取指&lt;/strong&gt;、&lt;strong&gt;预译码&lt;/strong&gt;、&lt;strong&gt;译码&lt;/strong&gt;、&lt;strong&gt;重命名&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;后端分为六个流水级，分别为 &lt;strong&gt;分发&lt;/strong&gt;、&lt;strong&gt;发射&lt;/strong&gt;、&lt;strong&gt;读寄存器&lt;/strong&gt;、&lt;strong&gt;执行&lt;/strong&gt;、&lt;strong&gt;写回&lt;/strong&gt;、&lt;strong&gt;提交&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;其中&lt;strong&gt;执行&lt;/strong&gt;级分为并行的四条流水线，分别为：&lt;strong&gt;算术流水线0&lt;/strong&gt;、&lt;strong&gt;算术流水线1&lt;/strong&gt;、&lt;strong&gt;乘除流水线&lt;/strong&gt;、&lt;strong&gt;访存流水线&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;前端采取顺序双发射设计，取指宽度为2，每个周期可以向后端最多传输2条指令。&lt;/p&gt;
&lt;p&gt;后端采取乱序四发射设计，流水线条数为4，每个周期可以进行最多2条指令的提交。&lt;/p&gt;
&lt;h2 id=&#34;22-前端设计&#34;&gt;2.2 前端设计
&lt;/h2&gt;&lt;p&gt;前端分为 &lt;strong&gt;预取指&lt;/strong&gt;（&lt;code&gt;PreFetch&lt;/code&gt;）、&lt;strong&gt;取指&lt;/strong&gt;（&lt;code&gt;Fetch&lt;/code&gt;）、&lt;strong&gt;预译码&lt;/strong&gt;（&lt;code&gt;PreDecode&lt;/code&gt;）、&lt;strong&gt;译码&lt;/strong&gt;（&lt;code&gt;Decode&lt;/code&gt;）、&lt;strong&gt;重命名&lt;/strong&gt;（&lt;code&gt;Rename&lt;/code&gt;） 共五级。&lt;/p&gt;
&lt;p&gt;其中，预译码级与译码级之间，使用了一个指令缓冲（&lt;code&gt;Instruction Buffer&lt;/code&gt;）进行解耦。&lt;/p&gt;
&lt;h3 id=&#34;221-预取指-prefetch&#34;&gt;2.2.1 预取指 PreFetch
&lt;/h3&gt;&lt;p&gt;在这一级中进行&lt;strong&gt;pc&lt;/strong&gt;的更新，并且将虚地址发送给&lt;code&gt;TLB&lt;/code&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;pc&lt;/strong&gt;发送至&lt;code&gt;TLB&lt;/code&gt;，&lt;code&gt;TLB&lt;/code&gt;进行翻译
&lt;ul&gt;
&lt;li&gt;若是直接地址翻译或直接地址映射，直接将得到的物理地址传递给&lt;code&gt;Fetch&lt;/code&gt;级&lt;/li&gt;
&lt;li&gt;若是映射地址翻译，给&lt;code&gt;TLB&lt;/code&gt;表项发地址，得到命中信息并传递给&lt;code&gt;Fetch&lt;/code&gt;级&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pc&lt;/strong&gt;发送至&lt;code&gt;I-Cache&lt;/code&gt;，基于&lt;code&gt;VIPT&lt;/code&gt;原理，给&lt;code&gt;I-Cache&lt;/code&gt;索引&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pc&lt;/strong&gt;发送至&lt;code&gt;BPU&lt;/code&gt;，进行分支预测(发送按双字对齐的两个&lt;strong&gt;pc&lt;/strong&gt;进行预测，如果第二个&lt;strong&gt;pc&lt;/strong&gt;不满足双字对齐则不预测)
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pc&lt;/strong&gt;发送至&lt;code&gt;BTB&lt;/code&gt;读取信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pc&lt;/strong&gt;发送至&lt;code&gt;BHT&lt;/code&gt;得到跳转历史，寄存器锁存供下一拍使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;根据情况更新&lt;strong&gt;pc&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;(最高优先级)后端传来的跳转请求：可能是例外中断造成的跳转，也可能是特权指令需要冲刷流水线，也可能是分支预测失败的重新取指&lt;/li&gt;
&lt;li&gt;(第二优先级)分支预测传来的跳转请求&lt;/li&gt;
&lt;li&gt;(第三优先级)更新&lt;strong&gt;pc&lt;/strong&gt;为按双字对齐的下一个&lt;strong&gt;pc&lt;/strong&gt;，例如 1c001000 $\rightarrow$ 1c001008，1c00110c $\rightarrow$ 1c001110&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;222-取指-fetch&#34;&gt;2.2.2 取指 Fetch
&lt;/h3&gt;&lt;p&gt;为降低硬件复杂度，我们设计了独特的取指方式，选择&lt;strong&gt;双字对齐&lt;/strong&gt;方式的&lt;strong&gt;双指令取指&lt;/strong&gt;。相较于四指令取指，这样的取指方式降低了因分支预测造成的标记无效指令的硬件开销，并且，效率也不会得到大幅降低，因为我们的&lt;code&gt;I-Cache&lt;/code&gt;一行存四个指令，大部分正常取指的情况下，两次取指中的第二次是&lt;strong&gt;必定命中&lt;/strong&gt;&lt;code&gt;I-Cache&lt;/code&gt;的，保证了前端取指的高效。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在此级中把命中信息发送至&lt;code&gt;TLB&lt;/code&gt;，读出命中表项，翻译出&lt;strong&gt;paddr&lt;/strong&gt;；并且判断是否存在&lt;code&gt;TLB&lt;/code&gt;相关例外&lt;/li&gt;
&lt;li&gt;将得到的&lt;strong&gt;paddr&lt;/strong&gt;发送至&lt;code&gt;I-Cache&lt;/code&gt;，判定是否命中，若不命中则进入阻塞状态，并与主存利用axi接口交互取出Cache缺失行&lt;/li&gt;
&lt;li&gt;取出两条指令，并且保证pc是按双字对齐的，若第二条指令&lt;strong&gt;pc&lt;/strong&gt;未满足条件则会标记为无效&lt;/li&gt;
&lt;li&gt;得到分支预测的结果
&lt;ul&gt;
&lt;li&gt;利用上一拍得到的&lt;code&gt;BTB&lt;/code&gt;信息和&lt;code&gt;BHT&lt;/code&gt;中读取到的&lt;code&gt;BHR&lt;/code&gt;，得到预测方向和跳转结果&lt;/li&gt;
&lt;li&gt;若预测跳转，清刷&lt;code&gt;prefetch&lt;/code&gt;并对其发出跳转请求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;2221-分支预测器-bpu&#34;&gt;2.2.2.1 分支预测器 BPU
&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://crpboy.github.io/p/nscscc-2024-report/BPU.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在乱序处理器当中，因为流水级数深，分支预测失败代价过大。因此，分支预测器很大程度上决定着cpu的&lt;strong&gt;IPC&lt;/strong&gt;。&lt;br&gt;
为降低硬件复杂度，我们同样设计了&lt;strong&gt;两级BPU&lt;/strong&gt;，将整个预测过程分为了两拍完成。我们使用了&lt;strong&gt;基于局部历史的饱和计数器分支预测&lt;/strong&gt;结合&lt;strong&gt;BTB&lt;/strong&gt;和&lt;strong&gt;RAS&lt;/strong&gt;对多种分支场景进行了有效的分支预测，下表是性能测试中十个测试点的具体成绩。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;测试点编号&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;测试点名称&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;无RAS分支预测成功率&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;分支预测成功率&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;bitcount&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;80.510 %&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;94.509 %&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;bubble_sort&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;/&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;84.935 %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;coremark&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;/&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;88.955 %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;crc32&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;90.100 %&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;96.367 %&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;dhrystone&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;/&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;95.331 %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;quick_sort&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;/&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;74.780 %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;select_sort&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;/&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;93.456 %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;sha&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;/&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;98.284 %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;9&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;stream_copy&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;/&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;95.924 %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;stringsearch&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;/&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;93.666 %&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;BHT(Branch History Table)&lt;/code&gt;：保存跳转指令的跳转局部历史，在跳转指令提交时更新&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PHT(Pattern History Table)&lt;/code&gt;：记录跳转历史对应的饱和计数器值，对应跳转的方向趋势，用于预测跳转方向&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;BTB(Branch Target Buffer)&lt;/code&gt;：记录&lt;strong&gt;pc&lt;/strong&gt;对应的跳转地址，兼顾判断跳转类型(&lt;strong&gt;CALL&lt;/strong&gt;,&lt;strong&gt;Return&lt;/strong&gt;,其他)的职责&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;适用指令：条件跳转类和&lt;strong&gt;CALL&lt;/strong&gt;型指令&lt;/li&gt;
&lt;li&gt;用途：记录指令的跳转类型，是否为跳转指令(&lt;code&gt;valid&lt;/code&gt;位)，跳转地址&lt;/li&gt;
&lt;li&gt;仅当&lt;code&gt;BTB&lt;/code&gt;命中时才可能发生分支预测&lt;/li&gt;
&lt;li&gt;表项组织形式如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Valid&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Tag&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Target&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Br_type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1 b&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;(32 - index) b&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;32 b&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2 b&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;RAS(Return Address Stack)&lt;/code&gt;：以&lt;strong&gt;栈&lt;/strong&gt;的形式记录&lt;strong&gt;CALL&lt;/strong&gt;指令的下一条指令地址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;适用指令：间接跳转&lt;strong&gt;Return&lt;/strong&gt;指令&lt;/li&gt;
&lt;li&gt;用途：预测&lt;strong&gt;Return&lt;/strong&gt;指令的跳转地址(因为函数调用和返回一定满足&lt;strong&gt;栈&lt;/strong&gt;的性质)，上表中&lt;strong&gt;加粗&lt;/strong&gt;表示的即为&lt;code&gt;RAS&lt;/code&gt;对函数调用密集型测试点的重大作用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RAS&lt;/code&gt;满时，对&lt;code&gt;RAS&lt;/code&gt;使用循环更新，即再从底向上开始更新，可以尽可能保证预测准确性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分支预测器不会被flush&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;2222-tlb&#34;&gt;2.2.2.2 TLB
&lt;/h4&gt;&lt;p&gt;考虑到&lt;code&gt;TLB&lt;/code&gt;的全相连结构，它在被查询时硬件复杂度较高。为此，我们设计了&lt;strong&gt;同步读取&lt;/strong&gt;的&lt;code&gt;TLB&lt;/code&gt;逻辑，无论是前端还是后端的地址翻译，我们均会在第一拍发送虚地址，进行&lt;code&gt;TLB&lt;/code&gt;表项的查询，同时进行&lt;code&gt;mmu&lt;/code&gt;的判断，是否为直接地址翻译或直接地址映射，若为&lt;code&gt;TLB&lt;/code&gt;页表映射，则&lt;strong&gt;锁存&lt;/strong&gt;命中信息供下一拍使用；在下一拍同时得到例外有关信息。这样的设计均摊了查询&lt;code&gt;TLB&lt;/code&gt;表项的复杂度，有效的提高了频率。&lt;/p&gt;
&lt;h3 id=&#34;223-预译码-predecode&#34;&gt;2.2.3 预译码 PreDecode
&lt;/h3&gt;&lt;p&gt;为进一步降低分支预测失败造成的影响，我们创造性的在解码之前加入了&lt;strong&gt;预译码&lt;/strong&gt;级，在这一级中，我们在力所能及的程度下对分支结果进行&lt;strong&gt;最迅速&lt;/strong&gt;的检查，并且在发现错误的&lt;strong&gt;第一时间&lt;/strong&gt;通知前端重新取指。&lt;/p&gt;
&lt;p&gt;在这一级中会处理以下情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;必定跳转指令但预测不跳转：大概率是初次执行，更正预测结果并且更新分支预测器&lt;/li&gt;
&lt;li&gt;非跳转指令但预测跳转：不可能产生这种情况，因为仅当&lt;code&gt;BTB&lt;/code&gt;命中才会产生预测，非跳转指令&lt;code&gt;BTB&lt;/code&gt;不可能命中&lt;/li&gt;
&lt;li&gt;如若跳转地址错误，更正预测结果并且更新分支预测器&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;2231-指令缓冲-instruction-buffer-ib&#34;&gt;2.2.3.1 指令缓冲 Instruction Buffer (IB)
&lt;/h4&gt;&lt;p&gt;在预译码级与译码级之间，我们使用&lt;strong&gt;自己设计&lt;/strong&gt;的&lt;code&gt;FIFO&lt;/code&gt;，实现了一个指令缓冲，用于解耦取指级与译码级。该缓冲让取指效率最大化，无论后端是否阻塞都不会浪费前端的取指资源，做到了效率的最大利用；前端只需专注取指并填充至&lt;code&gt;IB&lt;/code&gt;，而后端只需专注于从&lt;code&gt;IB&lt;/code&gt;中取出指令并执行，极大地提高了处理器的执行效率。&lt;/p&gt;
&lt;p&gt;同时，为了保证后续流水线资源的最大利用率，取指前端保证&lt;code&gt;IB&lt;/code&gt;中的信息均为有效指令，排除任何气泡指令向下一级传输。&lt;/p&gt;
&lt;h3 id=&#34;214-译码-decode&#34;&gt;2.1.4 译码 Decode
&lt;/h3&gt;&lt;p&gt;本级用于译码，我们通过chisel语言的特性，利用&lt;code&gt;BitPat&lt;/code&gt;生成树形译码元件进行译码，并输出指令所需信息(例如功能模块名和具体功能)，做到了代码上的清晰明了。&lt;/p&gt;
&lt;p&gt;同时，我们会在这一级对于指令进行中断的标记，保证了CPU资源的利用率。&lt;/p&gt;
&lt;h3 id=&#34;225-重命名-rename&#34;&gt;2.2.5 重命名 Rename
&lt;/h3&gt;&lt;p&gt;重命名级是CPU&lt;strong&gt;乱序&lt;/strong&gt;架构当中至关重要的一环。为了消除CPU后端乱序写回带来的&lt;strong&gt;写后写&lt;/strong&gt;、&lt;strong&gt;读后写&lt;/strong&gt;的相关性问题，保证乱序执行的正确性，在重命名级当中，我们将对于逻辑寄存器&lt;code&gt;areg&lt;/code&gt;进行物理寄存器&lt;code&gt;preg&lt;/code&gt;的分配。&lt;/p&gt;
&lt;p&gt;同时，为了保证指令乱序执行后，能够&lt;strong&gt;顺序&lt;/strong&gt;地对于处理器状态进行更新，我们还需要对于重排序缓存&lt;code&gt;ROB&lt;/code&gt;进行表项空间的申请，获得本级指令对应的&lt;strong&gt;ROB编号&lt;/strong&gt;，从而保证最终在后端提交时能够通过编号实现顺序的提交。&lt;/p&gt;
&lt;p&gt;具体实现时，当&lt;code&gt;RAT&lt;/code&gt;分配物理寄存器时，将会从空闲寄存器表&lt;code&gt;freelist&lt;/code&gt;当中取最多两个空闲寄存器，作为原逻辑寄存器&lt;code&gt;areg&lt;/code&gt;对应的物理寄存器&lt;code&gt;preg&lt;/code&gt;。同时，这一级会向发射级发送占用寄存器的请求，以此阻塞发射队列当中的相关指令，从而保证了后端指令唤醒顺序的正确性。在申请&lt;code&gt;ROB&lt;/code&gt;空间的时候，&lt;code&gt;ROB&lt;/code&gt;通过其&lt;code&gt;fifo&lt;/code&gt;指针分配两条指令对应的&lt;code&gt;ROB&lt;/code&gt;编号，并且会保存指令对应的信息。&lt;/p&gt;
&lt;p&gt;至此，指令开始占用寄存器映射表信息、&lt;code&gt;ROB&lt;/code&gt;表项、物理寄存器资源，可以认为指令从本级开始即将进入后端执行的流程当中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://crpboy.github.io/p/nscscc-2024-report/rename.drawio.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;rename&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;23-后端设计&#34;&gt;2.3 后端设计
&lt;/h2&gt;&lt;p&gt;后端分为六个流水级，分别为&lt;strong&gt;分发&lt;/strong&gt;（&lt;code&gt;Dispatch&lt;/code&gt;）、&lt;strong&gt;发射&lt;/strong&gt;（&lt;code&gt;Issue&lt;/code&gt;）、&lt;strong&gt;读寄存器&lt;/strong&gt;（&lt;code&gt;ReadReg&lt;/code&gt;）、&lt;strong&gt;执行&lt;/strong&gt;（&lt;code&gt;Execute&lt;/code&gt;）、&lt;strong&gt;写回&lt;/strong&gt;（&lt;code&gt;WriteBack&lt;/code&gt;）、&lt;strong&gt;提交&lt;/strong&gt;（&lt;code&gt;Commit&lt;/code&gt;）。其中，执行级又根据流水线功能的不同，细分为1~3个流水级。算术流水线只有一级执行级，而乘除和访存有三级执行级。&lt;/p&gt;
&lt;p&gt;从发射级开始，后端分为四条独立的流水线，分别是2条&lt;strong&gt;算术&lt;/strong&gt;执行流水线，1条&lt;strong&gt;乘除&lt;/strong&gt;法执行流水线，1条&lt;strong&gt;访存&lt;/strong&gt;执行流水线。&lt;/p&gt;
&lt;p&gt;需要注意的是，特权指令放在乘除法。为了保证csr写指令的正确性，在重排序缓存提交指令的时候，才写csr寄存器并冲刷整条流水线。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://crpboy.github.io/p/nscscc-2024-report/backend-final.drawio.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;backend&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;231-分发-dispatch&#34;&gt;2.3.1 分发 Dispatch
&lt;/h3&gt;&lt;p&gt;本级会根据指令的类型，分发指令到各个流水线发射缓存当中。考虑到后端很有可能处于访存密集或算术密集状态，某一流水线可能被完全占满，因此我们的分发级允许只分发一条，而保留第二条指令到握手成功再进行分发。这样的分发逻辑能够使得满流水线时也能执行一定数量的其他流水线指令，从而提高了CPU的执行效率。&lt;/p&gt;
&lt;h3 id=&#34;232-发射-issue&#34;&gt;2.3.2 发射 Issue
&lt;/h3&gt;&lt;p&gt;这里定义了四个发射队列，对于单个发射队列，每个周期最多接收、发射一条指令。&lt;/p&gt;
&lt;p&gt;不同流水线的发射情况如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;运算流水线，我们已经通过寄存器重命名保证了乱序写回的正确性，因此乱序发射即可。&lt;/li&gt;
&lt;li&gt;乘除流水线，由于我们将特权指令分配在了本流水线，因此本流水线需要保证顺序发射。&lt;/li&gt;
&lt;li&gt;访存流水线，由于数据缓存只有一个，且需要维护访存数据的一致性，所以必须保证顺序发射。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于乱序发射的队列，我们使用了压缩队列实现。发射时将检查队列内所有指令的寄存器占用状态，若发现相关寄存器均已被唤醒则可以发射。关于寄存器占用状态的维护，我们会在发出唤醒信号的下一拍更新状态，并额外维护从写缓存中回传的uncached load的对应占用状态，防止冲刷导致相关寄存器的占用状态被解除。&lt;/p&gt;
&lt;p&gt;对于乱序发射的队列，会按照指令从旧到新的优先级进行发射，这是因为较旧的指令更有可能拥有较多的相关指令，一次发射能够唤醒更多的指令。对于顺序发射的队列，我们每个周期只会对队列头部的指令进行寄存器占用情况的检查，只会发射队列中的最旧指令，从而保证了这些需要顺序执行的指令的一致性。&lt;/p&gt;
&lt;h3 id=&#34;233-读寄存器-readreg&#34;&gt;2.3.3 读寄存器 ReadReg
&lt;/h3&gt;&lt;p&gt;这一级流水线在每条流水线当中都独立存在，负责从物理寄存器当中读出源操作数对应的数值。寄存器堆对于每一条流水线都分配了一个读接口。同时这一级也会接收&lt;strong&gt;执行级&lt;/strong&gt;和&lt;strong&gt;写回级&lt;/strong&gt;前递的信息，用于实现指令的背靠背执行的前递信号传递。 发生前递时，我们会对于前递的寄存器号进行比较。于我们比较的是物理寄存器地址，必定保证写相关寄存器的指令最多只会存在一个，因此可以使用独热码的判命中逻辑，这节约了一定的逻辑复杂度。&lt;/p&gt;
&lt;p&gt;如果是算术流水线的读寄存器阶段，还会进行相关指令的唤醒。在本级进行唤醒，能够保证下一拍相关指令进入readreg级，从而直接从算术执行级当中获得前递的数据，从而保证了指令的背靠背执行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://crpboy.github.io/p/nscscc-2024-report/forward.drawio.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;forward&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;234-算术流水线-arithmetic&#34;&gt;2.3.4 算术流水线 Arithmetic
&lt;/h3&gt;&lt;p&gt;算术流水线是CPU执行过程当中，访问最频繁的流水线。在算术流水线当中，我们的CPU会进行算术和分支指令的执行过程。考虑到这两类指令需要的元器件数目并不多，可以分配多条算术流水线用于这类指令的执行。&lt;/p&gt;
&lt;p&gt;由于我们的前端取指深度为2，后端也应该分配两条算术流水线，以保证算术密集型指令集当中，CPU后端理论能够持续维持双发射的算术指令提交行为。我们在算术指令密集的bitcount等测试集当中，获得了1.2以上的IPC，这证明了我们运算流水线双发+背靠背执行逻辑的可靠性。&lt;/p&gt;
&lt;h3 id=&#34;235-乘除流水线-muldiv&#34;&gt;2.3.5 乘除流水线 Muldiv
&lt;/h3&gt;&lt;p&gt;用于乘除指令与特权指令的执行，分为三级。拆分成多个流水级的主要原因是需要实现乘法运算的流水化。&lt;/p&gt;
&lt;p&gt;对于乘法运算，我们使用xilinx ip搭载了一个三级流水的乘法器，实现了乘法运算的流水化，这使得我们在执行大量乘法运算的时候，能够实现完全的流水化提交过程，优化了CPU的执行效率。&lt;/p&gt;
&lt;p&gt;对于除法运算，我们使用xilinx ip实现了除法器，并在乘除流水线的第一级中进行阻塞执行，考虑到除法指令在实际程序中的占比较低，阻塞式的执行逻辑并不会对于我们的执行效率产生过大影响。&lt;/p&gt;
&lt;p&gt;对于特权指令，我们会将写指令放入特权缓存&lt;code&gt;PrivBuffer&lt;/code&gt;当中，并阻塞后续所有特权指令，直到后端ROB进行提交的时候，才使得相关的非普通寄存器更改生效。这样的提交逻辑能够有效保证特权指令配置的一致性，防止特权指令提早对于处理器状态进行更改，并做到了较低的逻辑复杂度，能够更好的优化特权指令提交的复杂度。&lt;/p&gt;
&lt;h3 id=&#34;236-访存流水线-memory&#34;&gt;2.3.6 访存流水线 Memory
&lt;/h3&gt;&lt;p&gt;访存流水线是后端流水线当中最重要的一条，也是设计难度最高的一条。&lt;/p&gt;
&lt;p&gt;对于访存指令，某些访存指令会对处理器状态进行修改，因为其对处理器状态产生的影响不好撤销，所以当执行这些指令时，使用&lt;code&gt;Store Buffer&lt;/code&gt;(写缓存)对这种类型的访存指令进行暂存，只有当提交时，才会&lt;strong&gt;回传&lt;/strong&gt;至访存流水线真正执行。&lt;/p&gt;
&lt;p&gt;考虑到硬件复杂度和频率要求，我们设计了&lt;strong&gt;多级流水线&lt;/strong&gt;以提高频率。&lt;/p&gt;
&lt;h4 id=&#34;2361-mem0&#34;&gt;2.3.6.1 Mem0
&lt;/h4&gt;&lt;p&gt;这一级用于计算访存的虚地址以及TLB的相关信息。&lt;/p&gt;
&lt;p&gt;按照2.2.2.2 TLB提到的&lt;strong&gt;同步读取&lt;/strong&gt;的TLB设计，我们会在本级计算&lt;strong&gt;vaddr&lt;/strong&gt;，并发送至&lt;code&gt;TLB&lt;/code&gt;，由&lt;code&gt;TLB&lt;/code&gt;进行翻译。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若是直接地址翻译或直接地址映射，直接将得到的物理地址传递给&lt;code&gt;Mem1&lt;/code&gt;级&lt;/li&gt;
&lt;li&gt;若是映射地址翻译，给&lt;code&gt;TLB&lt;/code&gt;表项发地址，得到命中信息并传递给&lt;code&gt;Mem1&lt;/code&gt;级&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2362-mem1&#34;&gt;2.3.6.2 Mem1
&lt;/h4&gt;&lt;p&gt;在这一级中会选择接受是已提交的访存指令还是&lt;code&gt;Mem0&lt;/code&gt;传递而来的指令。在仲裁两条指令的时候，我们会优先选择已提交的访存指令进行执行，从而防止了因为缓存满而导致的阻塞。&lt;/p&gt;
&lt;p&gt;除此之外，Mem1级还会对于TLB相关信息进行维护，逻辑如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在此级中把命中信息发送至&lt;code&gt;TLB&lt;/code&gt;，读出命中表项，翻译出&lt;strong&gt;paddr&lt;/strong&gt;；并且判断是否存在&lt;code&gt;TLB&lt;/code&gt;相关例外&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vaddr&lt;/strong&gt;发送至&lt;code&gt;D-Cache&lt;/code&gt;，索引&lt;code&gt;D-Cache&lt;/code&gt;的&lt;code&gt;Tag-sram&lt;/code&gt;和&lt;code&gt;Data-sram&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;2363-mem2&#34;&gt;2.3.6.3 Mem2
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;将&lt;strong&gt;paddr&lt;/strong&gt;发送至&lt;code&gt;D-Cache&lt;/code&gt;，判定是否命中，若不命中则进入阻塞状态，并与主存利用axi接口交互取出Cache缺失行，若命中则执行&lt;strong&gt;可执行&lt;/strong&gt;的访存指令&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可执行&lt;/strong&gt;访存指令：cached load指令，回滚访存指令&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不可执行&lt;/strong&gt;访存指令：uncached load指令、store指令、原子访存指令和cacop指令。对于这些指令，将其push进&lt;code&gt;Store Buffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对于cached load指令，我们将从&lt;code&gt;D-Cache&lt;/code&gt;中读出的数据传递下去，在写回级进行前递判断，进而降低&lt;code&gt;mem2&lt;/code&gt;的硬件复杂度&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;2364-写缓存-store-buffer&#34;&gt;2.3.6.4 写缓存 Store Buffer
&lt;/h4&gt;&lt;p&gt;在乱序处理器当中，为了保证处于推测态的访存指令不会对外部状态进行更改，我们使用了写缓存&lt;code&gt;Store Buffer&lt;/code&gt;来维护。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当接收到&lt;code&gt;ROB&lt;/code&gt;的提交后，会将写缓存内的信息通过&lt;code&gt;Mem1&lt;/code&gt;级重新回流到访存流水线当中。&lt;/li&gt;
&lt;li&gt;由于&lt;code&gt;Mem1&lt;/code&gt;需要同时接受来自Mem0的数据和来自写缓存的数据，当&lt;code&gt;Mem0&lt;/code&gt;向&lt;code&gt;Mem1&lt;/code&gt;发送数据时，还会与写缓存发送的数据进行竞争，优先让写缓存内数据进行访存。&lt;/li&gt;
&lt;li&gt;当发生flush时，&lt;code&gt;Store Buffer&lt;/code&gt;直接清空即可&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;2365-数据指令缓存-cache&#34;&gt;2.3.6.5 数据(指令)缓存 Cache
&lt;/h4&gt;&lt;p&gt;每路的组织形式如下，在我们的设计中index = 8。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Line $0$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;bank 0&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;bank 1&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;bank 2&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;bank 3&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;valid&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;dirty&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Tag&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;32 b&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;32 b&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;32 b&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;32 b&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1  b&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1  b&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;(32 - index) b&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Line $2^{index} - 1$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;bank 0&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;bank 1&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;bank 2&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;bank 3&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;valid&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;dirty&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Tag&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;32 b&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;32 b&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;32 b&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;32 b&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1  b&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1  b&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;(32 - index) b&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;I-Cache&lt;/code&gt;和&lt;code&gt;D-Cache&lt;/code&gt;采取了同样的组织形式，只是&lt;code&gt;I-Cache&lt;/code&gt;取消了dirty位；bank在&lt;code&gt;I-Cache&lt;/code&gt;代表了指令，在&lt;code&gt;D-Cache&lt;/code&gt;中代表了数据。&lt;/p&gt;
&lt;p&gt;为了降低访存复杂度，我们着重设计了访存的状态机，为了获得优秀的硬件复杂度将复杂流程拆分。&lt;br&gt;
具体状态分为：&lt;code&gt;idle&lt;/code&gt;(闲置状态，判断命中)、&lt;code&gt;uncached_read&lt;/code&gt;、&lt;code&gt;uncached_write&lt;/code&gt;、&lt;code&gt;check_dirty&lt;/code&gt;、&lt;code&gt;writeback&lt;/code&gt;、&lt;code&gt;replace_line&lt;/code&gt;，其中&lt;code&gt;I-Cache&lt;/code&gt;无关于写操作的状态&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://crpboy.github.io/p/nscscc-2024-report/image-1.png&#34;
	width=&#34;451&#34;
	height=&#34;544&#34;
	srcset=&#34;https://crpboy.github.io/p/nscscc-2024-report/image-1_hu2819930101775771611.png 480w, https://crpboy.github.io/p/nscscc-2024-report/image-1_hu16228446889752569838.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;82&#34;
		data-flex-basis=&#34;198px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;237-写回-writeback&#34;&gt;2.3.7 写回 WriteBack
&lt;/h3&gt;&lt;p&gt;这一级用于写物理寄存器，更新rob当中对应的提交信息，并更新发射队列当中的寄存器占用状态。&lt;/p&gt;
&lt;p&gt;对于访存流水线，在我们原先的设计当中，推测唤醒会导致大量控制信号串行，从而导致关键路径产生、频率下降。因此，为了时序考虑，直到这一级才会对与访存指令相关的指令进行唤醒。在这一逻辑下，我们的IPC从原先的0.84降至0.78，但我们的频率由65MHz升至了83MHz，相较之下提升幅度达到了18%，因此我们取消了推测唤醒的设计，改为写回级唤醒。&lt;/p&gt;
&lt;h3 id=&#34;238-提交-commit&#34;&gt;2.3.8 提交 Commit
&lt;/h3&gt;&lt;p&gt;这一级用于进行最终的提交，解除对于CPU资源的占用，并解除寄存器的推测态。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;解除对于上一个物理寄存器的占用（opreg），并将opreg对应的寄存器编号插入到空闲寄存器列表freelist&lt;/li&gt;
&lt;li&gt;更新aRAT的映射关系，aRAT当中存储的是由已经提交的指令构成的、不涉及推测态指令的寄存器映射表&lt;/li&gt;
&lt;li&gt;对于包括分支、访存、特权在内的部分非算术指令，由于分支预测器更新限制、写缓存入队限制等原因，我们在检测到这些指令的时候，不会进行双指令的提交。假如检测到分支预测失败或例外，还会向冲刷控制器发出冲刷请求。&lt;/li&gt;
&lt;li&gt;当发生流水线清空的时候，首先向冲刷控制器发出请求。冲刷控制器会延迟一拍后，对于各个流水线及功能部件发出冲刷信号，并令重命名相关部件进行状态恢复。具体而言，状态恢复时，会将aRAT赋值给cRAT，清空rob当中的所有表项，并将freelist的尾指针置为头指针位置。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在提交级，我们通过ROB重排序缓存，成功实现了乱序执行结果的顺序写回过程，保证了乱序CPU在执行上的一致性，通过乱序架构的设计，我们的CPU达到了良好的性能表现。&lt;/p&gt;
&lt;h1 id=&#34;3-参考文献&#34;&gt;3. 参考文献
&lt;/h1&gt;&lt;p&gt;[1] J. Ye, and L. Xi, &lt;em&gt;PUA-MIPS&lt;/em&gt;, &lt;a class=&#34;link&#34; href=&#34;https://github.com/Clo91eaf/PUA-MIPS&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/Clo91eaf/PUA-MIPS&lt;/a&gt;, 2023&lt;/p&gt;
&lt;p&gt;[2] Z. Ma, &lt;em&gt;LA32R-pipeline-scala&lt;/em&gt;, &lt;a class=&#34;link&#34; href=&#34;https://github.com/MaZirui2001/LA32R-pipeline-scala&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/MaZirui2001/LA32R-pipeline-scala&lt;/a&gt;, 2023&lt;/p&gt;
&lt;p&gt;[3] H. Gao, and M. Liu, &lt;em&gt;NOP-Core&lt;/em&gt;, &lt;a class=&#34;link&#34; href=&#34;https://github.com/NOP-Processor/NOP-Core&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/NOP-Processor/NOP-Core&lt;/a&gt;, 2023&lt;/p&gt;
&lt;p&gt;[4] Y. Zhou, S. Chen, X. Liu and J. Chen, &lt;em&gt;Nontrivial-mips&lt;/em&gt;,https://github.com/trivialmips/nontrivial-mips, 2019&lt;/p&gt;
&lt;p&gt;[5] W. Wang, and J. Xing, &lt;em&gt;CPU Design and Practice&lt;/em&gt;, Beijing: China Machine Press, 2021&lt;/p&gt;
&lt;p&gt;[6] Y. Yao, &lt;em&gt;SuperScalar RISC Processor Design&lt;/em&gt;, Beijing: Tsinghua University Press, 2014&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
